df <- df %>%
mutate(across(all_of(crowding_cols), ~ . * Normalized_Intensity, .names = "{col}_Weighted"))
df_next_clean <- df%>%
drop_na(Normalized_Intensity_Next_Change)
weighted_crowding_cols <- c("Crowding_50_Weighted", "Crowding_100_Weighted", "Crowding_150_Weighted", "Crowding_200_Weighted", "Crowding_250_Weighted")
# Loop through each x column and create the plot
for (x_col in weighted_crowding_cols) {
create_smoothed_plot(x_col, "Normalized_Intensity", df)
}
p_values = c()
x_coefficients = c()
r_squares = c()
for(x_col in weighted_crowding_cols){
fit = lm(df$Normalized_Intensity ~ df[[x_col]])
fit_info = (summary(fit)$coefficients)
x_coefficients <- append(x_coefficients, fit_info[2])
p_values <- append(p_values, fit_info[8])
r_squares <- append(r_squares, summary(fit)$r.squared)
}
int_change_lm_df = data.frame(crowding_cols, x_coefficients, p_values, r_squares)
print(int_change_lm_df)
weighted_lm_df = lm_analyze_intervals(df, weighted_crowding_cols, "Normalized_Intensity")
plot_lm_interval_results(weighted_lm_df)
for (x_col in weighted_crowding_cols) {
create_smoothed_plot(x_col, "Normalized_Intensity_Next_Change", df_next_clean)
}
p_values = c()
x_coefficients = c()
r_squares = c()
for(x_col in weighted_crowding_cols){
fit = lm(df_next_clean$Normalized_Intensity_Next_Change ~ df_next_clean[[x_col]])
fit_info = (summary(fit)$coefficients)
x_coefficients <- append(x_coefficients, fit_info[2])
p_values <- append(p_values, fit_info[8])
r_squares <- append(r_squares, summary(fit)$r.squared)
}
int_change_lm_df = data.frame(crowding_cols, x_coefficients, p_values, r_squares)
print(int_change_lm_df)
weighted_change_lm_df = lm_analyze_intervals(df_next_clean, weighted_crowding_cols, "Normalized_Intensity_Next_Change")
plot_lm_interval_results(weighted_change_lm_df)
df_clean = na.omit(df)
df_clean <- df_clean %>%
mutate(across(all_of(crowding_cols), ~ . * Normalized_Intensity_Prev_Change, .names = "{col}_Change_Weighted"))
change_weighted_crowding_cols <- c("Crowding_50_Change_Weighted", "Crowding_100_Change_Weighted", "Crowding_150_Change_Weighted", "Crowding_200_Change_Weighted", "Crowding_250_Change_Weighted")
for (x_col in change_weighted_crowding_cols) {
create_smoothed_plot(x_col, "Normalized_Intensity_Next_Change", df_clean)
}
p_values = c()
x_coefficients = c()
r_squares = c()
for(x_col in change_weighted_crowding_cols){
fit = lm(df_clean$Normalized_Intensity_Next_Change ~ df_clean[[x_col]])
fit_info = (summary(fit)$coefficients)
x_coefficients <- append(x_coefficients, fit_info[2])
p_values <- append(p_values, fit_info[8])
r_squares <- append(r_squares, summary(fit)$r.squared)
}
int_change_lm_df = data.frame(crowding_cols, x_coefficients, p_values, r_squares)
print(int_change_lm_df)
weighted_lm_df = lm_analyze_intervals(df_clean, change_weighted_crowding_cols, "Normalized_Intensity_Next_Change")
plot_lm_interval_results(weighted_lm_df)
#parameters
hot_heat = 2
cold_heat = 1
step_size = 0.1
hot_size = 10
cold_size = 0
left_x = 0
right_x = 1000
hot_data = data.frame(
pos_x = seq(0,1000, length.out = hot_size),
heat = rep(hot_heat,hot_size)
)
cold_data = data.frame(
pos_x = seq(0,1000, length.out = cold_size),
heat = rep(cold_heat,cold_size)
)
## combine data
cancer_pos = rbind(hot_data, cold_data)
#k: chemokine decay constant
k = 0.2
#d: chemokine diffusion constant
d = 100
#M: heat of cancer cell
#x: distance from cancer cell to current x position
calculate_diffusion_1d <- function(k, d, m, x) {
ifelse(x < 0,
(m / (2 * sqrt(d * k))) * exp(x * sqrt(k / d)),
(m / (2 * sqrt(d * k))) * exp(-x * sqrt(k / d)))
}
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(x_positions))
for (row in 1:nrow(cancer_pos)) {
y <- calculate_diffusion_1d(k = k, d = d, m = cancer_pos[row, "heat"], x = (chemokine_x_positions - cancer_pos[row, "pos_x"]))
chemokine_concentration = chemokine_concentration + y # why do i add here?
}
chemokine_gradient = data.frame(x_pos = x_positions, concentration = chemokine_concentration)
## parameters
stoch = 1
chemokine_concentration = numeric(length(x_positions))
chemokine_concentration = numeric(length(chemokine_x_positions))
for (row in 1:nrow(cancer_pos)) {
y <- calculate_diffusion_1d(k = k, d = d, m = cancer_pos[row, "heat"], x = (chemokine_x_positions - cancer_pos[row, "pos_x"]))
chemokine_concentration = chemokine_concentration + y # why do i add here?
}
chemokine_gradient = data.frame(x_pos = x_positions, concentration = chemokine_concentration)
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
chemokine_gradient$concentration[chemokine_gradient$x_pos == 101.1, ]
chemokine_gradient$concentration[chemokine_gradient$x_pos == 101.1]
chemokine_gradient$concentration[chemokine_gradient$x_pos == 0.0]
chemokine_gradient$concentration[chemokine_gradient$x_pos == 100]
chemokine_gradient$concentration[chemokine_gradient$x_pos == 101.1]
chemokine_gradient$concentration[chemokine_gradient$x_pos == 101.2]
chemokine_gradient$concentration[chemokine_gradient$x_pos == 101.5]
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
tcell_df = run_sim(tcell_df)
run_sim <- function(agents){
for (i in 1:iterations){
previous_frame <- max(agents$frame)
next_frame <- previous_frame + 1
if (next_frame <= iterations){
previous_frame_agents <- agents[agents$frame == previous_frame,]
next_frame_agents <- data.frame(matrix(ncol = length(column_names), nrow = 0))
colnames(next_frame_agents) <- column_names
for (id in 1:num_tcells){
previous_frame_agent <- previous_frame_agents[previous_frame_agents$id == id,]
previous_pos_x <- previous_frame_agent$pos_x
# Get concentration to right
previous_pos_x_right <- previous_pos_x + step
previous_sum_conc_right <- chemokine_gradient$concentration[chemokine_gradient$x_pos == previous_pos_x_right]
# Get concentration to left
previous_pos_x_left <- previous_pos_x - step
previous_sum_conc_left <- chemokine_gradient$concentration[chemokine_gradient$x_pos == previous_pos_x_left]
delta_x <- get_next_step(previous_sum_conc_left, previous_sum_conc_right)
new_pos_x <- previous_pos_x + delta_x
if (new_pos_x < left_x){
new_pos_x = right_x
}else if(right_x < new_pos_x){
new_pos_x = left_x
}
next_agent <- data.frame(
id = id,
frame = next_frame,
pos_x = new_pos_x,
pos_y = chemokine_gradient$concentration[chemokine_gradient$x_pos == new_pos_x],
)
next_frame_agents <- rbind(next_frame_agents, next_agent)
}
agents <- rbind(agents, next_frame_agents)
}
}
return(agents)
}
tcell_df = run_sim(tcell_df)
# Get concentration to right
previous_pos_x_right <- previous_pos_x + step_size
run_sim <- function(agents){
for (i in 1:iterations){
previous_frame <- max(agents$frame)
next_frame <- previous_frame + 1
if (next_frame <= iterations){
previous_frame_agents <- agents[agents$frame == previous_frame,]
next_frame_agents <- data.frame(matrix(ncol = length(column_names), nrow = 0))
colnames(next_frame_agents) <- column_names
for (id in 1:num_tcells){
previous_frame_agent <- previous_frame_agents[previous_frame_agents$id == id,]
previous_pos_x <- previous_frame_agent$pos_x
# Get concentration to right
previous_pos_x_right <- previous_pos_x + step_size
previous_sum_conc_right <- chemokine_gradient$concentration[chemokine_gradient$x_pos == previous_pos_x_right]
# Get concentration to left
previous_pos_x_left <- previous_pos_x - step_size
previous_sum_conc_left <- chemokine_gradient$concentration[chemokine_gradient$x_pos == previous_pos_x_left]
delta_x <- get_next_step(previous_sum_conc_left, previous_sum_conc_right)
new_pos_x <- previous_pos_x + delta_x
if (new_pos_x < left_x){
new_pos_x = right_x
}else if(right_x < new_pos_x){
new_pos_x = left_x
}
next_agent <- data.frame(
id = id,
frame = next_frame,
pos_x = new_pos_x,
pos_y = chemokine_gradient$concentration[chemokine_gradient$x_pos == new_pos_x],
)
next_frame_agents <- rbind(next_frame_agents, next_agent)
}
agents <- rbind(agents, next_frame_agents)
}
}
return(agents)
}
tcell_df=run_sim(tcell_df)
get_next_step(25,50)
get_next_step(25,100)
get_next_step(25,150)
get_next_step(25,1)
get_next_step(25,25)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
#function which returns the next movement in which the cell will move
get_next_step <- function(left_conc, right_conc){
print(left_conc)
print(right_conc)
higher_conc_direction = ifelse(right_conc>left_conc,
1,
-1)
#calculates the probablity that a cell will move in the direction with a higher concentration
prob_move_higher_conc = 1 / (1 + exp(-1 * stoch * abs(left_conc - right_conc)))
rand_num = runif(1)
#if randomly generated number is less than probablity move in direction of higher concentration else move in opposite direction
if(rand_num < prob_move_higher_conc){
return(step_size * higher_conc_direction)
}else{
return(step_size * (-1 * higher_conc_direction))
}
}
tcell_df=run_sim(tcell_df)
next_frame_agents <- data.frame(matrix(ncol = length(column_names), nrow = 0))
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
tcell_df=run_sim(tcell_df)
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
tcell_df =run_sim(tcell_df)
View(tcell_df)
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
plot(chemokine_gradient$x_pos, chemokine_gradient$concentration, type ='l')
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
plot(chemokine_gradient$x_pos, chemokine_gradient$concentration, type ='l')
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
plot(chemokine_gradient$x_pos, chemokine_gradient$concentration)
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
plot(chemokine_gradient$x_pos, chemokine_gradient$concentration, type ='l')
library(ggplot2)
library(dplyr)
library(gridExtra)
raw_df = read.csv("data/20240619_624Mel_MIZ_DAB_B2_8_Phase-FullFeatureTable.csv")
cell_id = 1
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 9
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 175
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 72
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 72
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Mean Thickness for Cell ID", cell_id), y = "Mean Thickness (um)", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 72
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_thickness <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Mean Thickness for Cell ID", cell_id), y = "Mean Thickness (um)", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_thickness, plot_velocity, ncol = 1)
library(ggplot2)
library(dplyr)
library(gridExtra)
raw_df = read.csv("data/20240619_624Mel_MIZ_DAB_B2_8_Phase-FullFeatureTable.csv")
pnorm(x=117.2, 120, sqrt(10))
pnorm(117.2, 120, sqrt(10))
pnorm(117.2, 120, 10)
pnorm(117.2, 120, 10/36)
pnorm(117.2, 120, 10/6)
?rnorm
qnorm(0.10,115,5/3)
pnorm(112.8641, 115, 10/6)
qnorm(0.10, 115, 5/3, lower.tail = FALSE)
qnorm(0.10, 120, 5/3)
qnorm(0.10, 120, 5/3)
pnorm(117.8461, 115, 5/3)
1-pnorm(117.8461, 115, 5/3)
pnorm(1.42)
1-pnorm(1.42)
2*(1-pnorm(2.1))
pt(8.7, 9)
pnorm(2.89)
1-pnorm(2.89)
qnorm(0.001)
pnorm(1/.2272)
1/.2272
pt(2.46,9)
1-pt(2.46,9)
qt(0.05,9)
L = c(1928,2549,2825,1924,1628,2175,2114,2621,1843,2541)
P = c(2126,2885,2895,1942,1750,2184,2164,2626,2006,2627)
t.test(L,P,"less",var.equal = "TRUE")
t.test(L,P,"less",var.equal = TRUE)
t.test(L,P,"less")
t.test(L,P)
t.test(L,P,"greater")
qt(.005,37)
qt(.995,37)
2.715(sqrt(2.2^2/26+4.3^2/26))
2.715*(sqrt(2.2^2/26+4.3^2/26))
-9.4+2.572
-9.4-2.572
x = c(47,62,65,70,70,78,95,100,114,118,124,127,140,140,140,150,152,164,198,221)
y = c(38,62,53,67,84,79,93,106,117,116, 127,114,134,139,142,170,149,154,200,215)
plot(x,y)
install.packages("Rcpp")
Rcpp::compileAttributes()  # Ensures Rcpp headers are available
Library(Rcpp)
library(Rcpp)
Rcpp::compileAttributes()
library(Rcpp)
Rcpp::compileAttributes()
R.home()
R.version.string
Sys.getenv("PATH")
Sys.which("g++")
Sys.which("make")
system("where g++")
system("where make")
writeLines('PATH="C:\\rtools43\\usr\\bin;C:\\rtools43\\mingw64\\bin;${PATH}"', con = "~/.Renviron")
readRenviron("~/.Renviron")
Sys.which("g++")
Sys.which("make")
x <- c(99.0, 101.1, 102.7, 103.0, 105.4, 107.0, 108.7, 110.8,
112.1, 112.4, 113.6, 113.8, 115.1, 115.4, 120.0)
y <- c(28.8, 27.9, 27.0, 25.2, 22.8, 21.5, 20.9, 19.6,
17.1, 18.9, 16.0, 16.7, 13.0, 13.6, 10.8)
# Fit linear model
model <- lm(y ~ x)
# Get coefficients
intercept <- coef(model)[1]
slope <- coef(model)[2]
# Scatterplot with regression line
plot(x, y, pch=16, col="blue", main="Scatterplot with Regression Line",
xlab="Unit Weight (pcf)", ylab="Porosity (%)")
abline(model, col="red", lwd=2)
# Print regression equation
cat("Regression equation: ŷ =", round(intercept, 2), "-", round(abs(slope), 3), "x\n")
plot(x,y, xlab = "weight", ylab = "porosity")
abline(model)
summary(model)
source("~/.active-rstudio-document", echo=TRUE)
setwd("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim")
library(Rcpp)
library(ggplot2)
# Source the C++ simulation code
Rcpp::sourceCpp('oneD_part2_sim.cpp')
# Load the datasets (adjust the file paths as necessary)
yfp <- read.csv("2D_Data/10mm_tumor/YFP_1D_projected.csv", header = TRUE)
rfp <- read.csv("2D_Data/10mm_tumor/RFP_1D_projected.csv", header = TRUE)
cd4 <- read.csv("2D_Data/10mm_tumor/CD4_1D_projected.csv", header = TRUE)
# Define cancer cell positions and corresponding heats:
# For example, assign YFP cells a heat of 1 and RFP cells a heat of 4.
cancer_x <- c(yfp$x, rfp$x)
cancer_M <- c(rep(1, nrow(yfp)), rep(4, nrow(rfp)))
# Gradient-specific parameters
D <- 100         # Diffusion coefficient
delta <- 0.1     # Decay rate
# Determine the domain from all positions (cancer cells and T-cells)
all_positions <- c(yfp$x, rfp$x, cd4$x)
b_min <- min(all_positions)
b_max <- max(all_positions)
# Apply padding to the domain
pad <- 50
grid_start <- b_min - pad
grid_end <- b_max + pad
grid_step <- 1
# Create the directory if it doesn't exist
if(!dir.exists("precomputedGradients")){
dir.create("precomputedGradients")
}
# Create a unique filename based on key gradient parameters
grad_filename <- sprintf("precomputedGradients/gradient_D%.1f_delta%.1f_bmin%.2f_bmax%.2f.csv",
D, delta, b_min, b_max)
if(file.exists(grad_filename)){
grad_table <- read.csv(grad_filename, header = TRUE)$gradient
cat("Loaded precomputed gradient from file.\n")
} else {
cat("Precomputed gradient not found. Computing gradient table...\n")
grad_table <- precompute_gradient_table(grid_start, grid_end, grid_step,
cancer_x, cancer_M, D, delta)
write.csv(data.frame(gradient = grad_table), grad_filename, row.names = FALSE)
cat("Gradient table computed and saved to file.\n")
}
# Simulation-specific parameters (only pertaining to the T-cell movement)
num_tcells <- nrow(cd4)  # number of T-cells from the CD4 dataset
alpha <- 1000           # sensitivity parameter for T-cell movement
always_update <- TRUE   # flag to always update the T-cell velocity
num_steps <- 500        # number of simulation steps
set.seed(123)  # For reproducibility
sim_time <- system.time({
sim_results <- run_simulation(
num_tcells = num_tcells,
b_min = b_min,
b_max = b_max,
cancer_x = cancer_x,
cancer_M = cancer_M,
D = D,
delta = delta,
alpha = alpha,
num_steps = num_steps,
always_update = always_update,
gradient_table = grad_table,
grid_start = grid_start,
grid_step = grid_step
)
})
cat("Simulation time: ", sim_time["elapsed"], " seconds.\n")
# Create data frames for experimental and simulated T-cell positions
real_data <- data.frame(x = cd4$x, type = "Experimental")
sim_data <- data.frame(x = sim_results$final_positions, type = "Simulated")
combined_data <- rbind(real_data, sim_data)
# Plot density comparison of T-cell positions
ggplot(combined_data, aes(x = x, fill = type)) +
geom_density(alpha = 0.5) +
ggtitle("T-cell Position Distribution Comparison") +
xlab("Position") + ylab("Density") +
theme_minimal()
View(sim_results)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
View(sim_results)
View(sim_results)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/oneD_part2_driver.R", echo=TRUE)
