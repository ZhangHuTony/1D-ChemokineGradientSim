previous_pos_x <- previous_frame_agent$x_pos
# Get concentration to right
previous_pos_x_right <- get_new_torus_pos(previous_pos_x, step_size)
print(previous_pos_x_right)
previous_sum_conc_right <- chemokine_gradient$concentration[chemokine_gradient$x_pos == previous_pos_x_right]
# Get concentration to left
previous_pos_x_left <- get_new_torus_pos(previous_pos_x, -1*step_size)
previous_sum_conc_left <- chemokine_gradient$concentration[chemokine_gradient$x_pos == previous_pos_x_left]
delta_x <- get_next_step(previous_sum_conc_left, previous_sum_conc_right)
new_pos_x = get_new_torus_pos(previous_pos_x, delta_x)
next_agent <- data.frame(
id = id,
frame = next_frame,
pos_x = new_pos_x,
pos_y = chemokine_gradient$concentration[chemokine_gradient$x_pos == new_pos_x]
)
next_frame_agents <- rbind(next_frame_agents, next_agent)
}
agents <- rbind(agents, next_frame_agents)
}
}
return(agents)
}
test_df = run_sim(tcell_df)
source("C:/Users/Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
View(cancer_pos)
View(chemokine_gradient)
View(cold_data)
View(hot_data)
View(tcell_df)
test_df = run_sim(tcell_df)
View(tcell_df)
source("C:/Users/Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
test_df = run_sim(tcell_df)
View(test_df)
source("C:/Users/Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
install.packages("gganimate")
install.packages("av")
source("C:/Users/Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
test_df = run_sim(tcell_df)
makePlotAtFrame(test_df, chemokine_gradient, 401)
library(readxl) #package for reading excel files
tumor_3_raw = read_excel('Data/6235_3mm X coordinates for cross sections.xlsx', sheet = 1)
View(tumor_3_raw)
##function to split dataset into cancer and CD4 dataframes (removes any rows with multiple markers)
library(dplyr)
clean_raw_data <- function(df) {
# Clean the data: Trim spaces and convert to lowercase
df <- df %>%
mutate(
`AF647_clean` = trimws(tolower(`AF647?`)),
`YFP_clean` = trimws(tolower(`YFP?`)),
`RFP_clean` = trimws(tolower(`RFP?`))
)
rename_with( ~ "pos_x", .cols = 7)
# Filter CD4 cells (AF647)
CD4_Cells <- df %>%
filter( AF647_clean == "af647" & is.na(YFP_clean) ) #keep rows with only AF647
# Filter Cancer cells (YFP or RFP)
Cancer_Cells <- df %>%
filter(
(YFP_clean == "yfp" & is.na(RFP_clean) & is.na(AF647_clean) ) #keep rows with only YFP
| # or
(is.na(YFP_clean) & RFP_clean == "rfp" & is.na(AF647_clean) ) #keep rows with only RFP
)
return(list(CD4_df = CD4_Cells, Cancer_df = Cancer_Cells))
}
test = clean_raw_data(tumor_3_raw)
clean_raw_data <- function(df) {
# Clean the data: Trim spaces and convert to lowercase
df <- df %>%
mutate(
`AF647_clean` = trimws(tolower(`AF647?`)),
`YFP_clean` = trimws(tolower(`YFP?`)),
`RFP_clean` = trimws(tolower(`RFP?`))
) %>%
rename_with( ~ "pos_x", .cols = 7)
# Filter CD4 cells (AF647)
CD4_Cells <- df %>%
filter( AF647_clean == "af647" & is.na(YFP_clean) ) #keep rows with only AF647
# Filter Cancer cells (YFP or RFP)
Cancer_Cells <- df %>%
filter(
(YFP_clean == "yfp" & is.na(RFP_clean) & is.na(AF647_clean) ) #keep rows with only YFP
| # or
(is.na(YFP_clean) & RFP_clean == "rfp" & is.na(AF647_clean) ) #keep rows with only RFP
)
return(list(CD4_df = CD4_Cells, Cancer_df = Cancer_Cells))
}
test = clean_raw_data(tumor_3_raw)
cancer_test = test$Cancer_df
cd4_test = test$CD4_df
View(cancer_test)
View(cd4_test)
library(readxl) #package for reading excel files
tumor_3_raw = read_excel('Data/6235_3mm X coordinates for cross sections.xlsx', sheet = 1)
##function to split dataset into cancer and CD4 dataframes (removes any rows with multiple markers)
library(dplyr)
clean_raw_data <- function(df) {
# Clean the data: Trim spaces and convert to lowercase
df <- df %>%
mutate(
`AF647_clean` = trimws(tolower(`AF647?`)),
`YFP_clean` = trimws(tolower(`YFP?`)),
`RFP_clean` = trimws(tolower(`RFP?`))
) %>%
rename_with( ~ "pos_x", .cols = 7)
# Filter CD4 cells (AF647)
CD4_Cells <- df %>%
filter( AF647_clean == "af647" & is.na(YFP_clean) ) #keep rows with only AF647
%>%
output = clean_raw_data(tumor_3_raw)
clean_raw_data <- function(df) {
# Clean the data: Trim spaces and convert to lowercase
df <- df %>%
mutate(
`AF647_clean` = trimws(tolower(`AF647?`)),
`YFP_clean` = trimws(tolower(`YFP?`)),
`RFP_clean` = trimws(tolower(`RFP?`))
) %>%
rename_with( ~ "pos_x", .cols = 7)
# Filter CD4 cells (AF647)
CD4_Cells <- df %>%
filter( AF647_clean == "af647" & is.na(YFP_clean) ) #keep rows with only AF647
%>%
clean_raw_data <- function(df) {
# Clean the data: Trim spaces and convert to lowercase
df <- df %>%
mutate(
`AF647_clean` = trimws(tolower(`AF647?`)),
`YFP_clean` = trimws(tolower(`YFP?`)),
`RFP_clean` = trimws(tolower(`RFP?`))
) %>%
rename_with( ~ "pos_x", .cols = 7)
# Filter CD4 cells (AF647)
CD4_Cells <- df %>%
filter(
AF647_clean == "af647" & is.na(YFP_clean) & is.na(RFP_clean)#keep rows with only AF647
)%>%
select(pos_x)
# Filter YFP cells
YFP_Cells <- df %>%
filter(
(YFP_clean == "yfp" & is.na(RFP_clean) & is.na(AF647_clean) ) #keep rows with only YFP
)%>%
select(pos_x)
# Filter RFP cells
RFP_Cells <- df %>%
filter(
(RFP_clean == "rfp" & is.na(YFP_clean) &  is.na(AF647_clean) ) #keep rows with only RFP
)%>%
select(pos_x)
return(list(CD4_df = CD4_Cells, YFP_df = YFP_Cells, RFP_df = RFP_Cells))
}
output = clean_raw_data(tumor_3_raw)
CD4_Output = output$CD4_df
YFP_Output = output$YFP_df
RFP_Output = output$RFP_df
View(RFP_Output)
setwd("C:/Users/Tony Zhang/OneDrive/Documents/UROP/Code")
setwd("C:/Users/Tony Zhang/OneDrive/Documents/UROP/Code")
setwd("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/Data")
setwd("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim")
setwd("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/Data")
#Output files to desired location
write.csv(CD4_Output, "3mm_tumor/CrossSection1/CD4_XPos.csv",row.names=FALSE)
write.csv(YFP_Output, "3mm_tumor/CrossSection1/YFP_XPos.csv",row.names=FALSE)
write.csv(RFP_Output, "3mm_tumor/CrossSection1/RFP_XPos.csv",row.names=FALSE)
View(RFP_Output)
View(YFP_Output)
setwd("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim")
# Actual Data
CD4_cells = read.csv('Data/3mm_tumor_CrossSection1/CD4_XPos.csv')
# Actual Data
CD4_cells = read.csv('Data/3mm_tumor/CrossSection1/CD4_XPos.csv')
YFP_cells = read.csv('Data/3mm_tumor/CrossSection1/YFP_XPos.csv')
RFP_cells = read.csv('Data/3mm_tumor/CrossSection1/RFP_XPos.csv')
#k: chemokine decay constant
#d: chemokine diffusion constant
#M: heat of cancer cell
#x: distance from cancer cell to current x position
calculate_diffusion_1d <- function(k, d, m, x) {
ifelse(x < 0,
(m / (2 * sqrt(d * k))) * exp(x * sqrt(k / d)),
(m / (2 * sqrt(d * k))) * exp(-x * sqrt(k / d)))
}
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
for (row in 1:nrow(RFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
#calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
for (row in 1:nrow(YFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient = calculate_chemokine_gradient()
step_size = 1 #minimum step size of agents
gradient = calculate_chemokine_gradient()
View(gradient)
plot(gradient$x_pos, gradient$concentration, type = "l")
raw_df = read_excel('3mm_tumor/6235_3mm X coordinates for cross sections.xlsx', sheet = 1)
library(readxl) #package for reading excel files
raw_df = read_excel('3mm_tumor/6235_3mm X coordinates for cross sections.xlsx', sheet = 1)
setwd("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/Data")
raw_df = read_excel('3mm_tumor/6235_3mm X coordinates for cross sections.xlsx', sheet = 1)
##function to split dataset into cancer and CD4 dataframes (removes any rows with multiple markers)
library(dplyr)
clean_raw_data <- function(df) {
# Clean the data: Trim spaces and convert to lowercase
df <- df %>%
rename_with( ~ "pos_x", .cols = 7) %>%
mutate(
`AF647_clean` = trimws(tolower(`AF647?`)),
`YFP_clean` = trimws(tolower(`YFP?`)),
`RFP_clean` = trimws(tolower(`RFP?`)),
pos_x = round(pos_x) #round to nearest integer
)
# Filter CD4 cells (AF647)
CD4_Cells <- df %>%
filter(
AF647_clean == "af647" & is.na(YFP_clean) & is.na(RFP_clean)#keep rows with only AF647
)%>%
select(pos_x)
# Filter YFP cells
YFP_Cells <- df %>%
filter(
(YFP_clean == "yfp" & is.na(RFP_clean) & is.na(AF647_clean) ) #keep rows with only YFP
)%>%
select(pos_x)
# Filter RFP cells
RFP_Cells <- df %>%
filter(
(RFP_clean == "rfp" & is.na(YFP_clean) &  is.na(AF647_clean) ) #keep rows with only RFP
)%>%
select(pos_x)
return(list(CD4_df = CD4_Cells, YFP_df = YFP_Cells, RFP_df = RFP_Cells))
}
output = clean_raw_data(raw_df)
View(raw_df)
CD4_Output = output$CD4_df
YFP_Output = output$YFP_df
RFP_Output = output$RFP_df
View(YFP_Output)
#Output files to desired location
write.csv(CD4_Output, "3mm_tumor/CrossSection1/CD4_XPos.csv",row.names=FALSE)
write.csv(YFP_Output, "3mm_tumor/CrossSection1/YFP_XPos.csv",row.names=FALSE)
write.csv(RFP_Output, "3mm_tumor/CrossSection1/RFP_XPos.csv",row.names=FALSE)
# Actual Data
CD4_cells = read.csv('Data/3mm_tumor/CrossSection1/CD4_XPos.csv')
setwd("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim")
# Actual Data
CD4_cells = read.csv('Data/3mm_tumor/CrossSection1/CD4_XPos.csv')
YFP_cells = read.csv('Data/3mm_tumor/CrossSection1/YFP_XPos.csv')
RFP_cells = read.csv('Data/3mm_tumor/CrossSection1/RFP_XPos.csv')
#k: chemokine decay constant
#d: chemokine diffusion constant
#M: heat of cancer cell
#x: distance from cancer cell to current x position
calculate_diffusion_1d <- function(k, d, m, x) {
ifelse(x < 0,
(m / (2 * sqrt(d * k))) * exp(x * sqrt(k / d)),
(m / (2 * sqrt(d * k))) * exp(-x * sqrt(k / d)))
}
step_size = 1 #minimum step size of agents
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
for (row in 1:nrow(RFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
#calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
for (row in 1:nrow(YFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient = calculate_chemokine_gradient()
View(gradient)
plot(gradient$x_pos, gradient$concentration, type = "l")
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
for (row in 1:nrow(RFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
#calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
# for (row in 1:nrow(YFP_cells)) {
#   y <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
#   chemokine_concentration =  chemokine_concentration + y
# }
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient = calculate_chemokine_gradient()
plot(gradient$x_pos, gradient$concentration, type = "l")
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
for (row in 1:nrow(RFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
# calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
for (row in 1:nrow(YFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient_1 = calculate_chemokine_gradient()
plot(gradient_1$x_pos, gradient_1$concentration, type = "l")
gradient = calculate_chemokine_gradient()
plot(gradient$x_pos, gradient$concentration, type = "l")
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
# for (row in 1:nrow(RFP_cells)) {
#   y <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
#   chemokine_concentration =  chemokine_concentration + y
# }
# calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
for (row in 1:nrow(YFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient = calculate_chemokine_gradient()
plot(gradient$x_pos, gradient$concentration, type = "l")
View(RFP_cells)
View(YFP_cells)
# Actual Data
CD4_cells = read.csv('Data/3mm_tumor/CrossSection1/CD4_XPos.csv')
YFP_cells = read.csv('Data/3mm_tumor/CrossSection1/YFP_XPos.csv')
RFP_cells = read.csv('Data/3mm_tumor/CrossSection1/RFP_XPos.csv')
#k: chemokine decay constant
#d: chemokine diffusion constant
#M: heat of cancer cell
#x: distance from cancer cell to current x position
calculate_diffusion_1d <- function(k, d, m, x) {
ifelse(x < 0,
(m / (2 * sqrt(d * k))) * exp(x * sqrt(k / d)),
(m / (2 * sqrt(d * k))) * exp(-x * sqrt(k / d)))
}
step_size = 1 #minimum step size of agents
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
# for (row in 1:nrow(RFP_cells)) {
#   y <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
#   chemokine_concentration =  chemokine_concentration + y
# }
# calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
for (row in 1:nrow(YFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient = calculate_chemokine_gradient()
plot(gradient$x_pos, gradient$concentration, type = )
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
for (row in 1:nrow(RFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
# calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
# for (row in 1:nrow(YFP_cells)) {
#   y <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
#   chemokine_concentration =  chemokine_concentration + y
# }
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient = calculate_chemokine_gradient()
plot(gradient$x_pos, gradient$concentration, type = )
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
# for (row in 1:nrow(RFP_cells)) {
#   y <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
#   chemokine_concentration =  chemokine_concentration + y
# }
# calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
for (row in 1:nrow(YFP_cells)) {
y <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + y
}
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient = calculate_chemokine_gradient()
plot(gradient$x_pos, gradient$concentration, type = 'l')
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
# for (row in 1:nrow(RFP_cells)) {
#   diffusion_value <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
#   chemokine_concentration =  chemokine_concentration + diffusion_value
# }
# calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
for (row in 1:nrow(YFP_cells)) {
diffusion_value <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + diffusion_value
}
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient = calculate_chemokine_gradient()
plot(gradient$x_pos, gradient$concentration, type = 'l')
#k: chemokine decay constant
#d: chemokine diffusion constant
#r: rfp (cold) heat
#y: yfp (hot) heat
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
for (row in 1:nrow(RFP_cells)) {
diffusion_value <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + diffusion_value
}
# calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
for (row in 1:nrow(YFP_cells)) {
diffusion_value <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + diffusion_value
}
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
gradient = calculate_chemokine_gradient()
plot(gradient$x_pos, gradient$concentration, type = 'l')
