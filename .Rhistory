new_pos_x <- previous_pos_x + delta_x
if (new_pos_x < left_x){
new_pos_x = right_x
}else if(right_x < new_pos_x){
new_pos_x = left_x
}
next_agent <- data.frame(
id = id,
frame = next_frame,
pos_x = new_pos_x,
pos_y = chemokine_gradient$concentration[chemokine_gradient$x_pos == new_pos_x],
)
next_frame_agents <- rbind(next_frame_agents, next_agent)
}
agents <- rbind(agents, next_frame_agents)
}
}
return(agents)
}
tcell_df=run_sim(tcell_df)
get_next_step(25,50)
get_next_step(25,100)
get_next_step(25,150)
get_next_step(25,1)
get_next_step(25,25)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
get_next_step(25,26)
#function which returns the next movement in which the cell will move
get_next_step <- function(left_conc, right_conc){
print(left_conc)
print(right_conc)
higher_conc_direction = ifelse(right_conc>left_conc,
1,
-1)
#calculates the probablity that a cell will move in the direction with a higher concentration
prob_move_higher_conc = 1 / (1 + exp(-1 * stoch * abs(left_conc - right_conc)))
rand_num = runif(1)
#if randomly generated number is less than probablity move in direction of higher concentration else move in opposite direction
if(rand_num < prob_move_higher_conc){
return(step_size * higher_conc_direction)
}else{
return(step_size * (-1 * higher_conc_direction))
}
}
tcell_df=run_sim(tcell_df)
next_frame_agents <- data.frame(matrix(ncol = length(column_names), nrow = 0))
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
tcell_df=run_sim(tcell_df)
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
tcell_df =run_sim(tcell_df)
View(tcell_df)
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
plot(chemokine_gradient$x_pos, chemokine_gradient$concentration, type ='l')
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
plot(chemokine_gradient$x_pos, chemokine_gradient$concentration, type ='l')
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
plot(chemokine_gradient$x_pos, chemokine_gradient$concentration)
source("C:/Users/Tony Zhang/OneDrive/Documents/Fall-2024 Semester/UROP/TumorDataModel_Reimp.R", echo=TRUE)
plot(chemokine_gradient$x_pos, chemokine_gradient$concentration, type ='l')
library(ggplot2)
library(dplyr)
library(gridExtra)
raw_df = read.csv("data/20240619_624Mel_MIZ_DAB_B2_8_Phase-FullFeatureTable.csv")
cell_id = 1
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 9
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 175
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 72
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 72
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_track_length <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Mean Thickness for Cell ID", cell_id), y = "Mean Thickness (um)", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_track_length, plot_velocity, ncol = 1)
cell_id = 72
df_filtered = raw_df[raw_df$Tracking.ID == cell_id, ]
plot_drymass <- ggplot(df_filtered, aes(x = Frame, y = Dry.Mass)) +
geom_line(color = "blue") +
labs(title = paste("Dry Mass for Cell ID", cell_id), y = "Dry Mass")
plot_velocity <- ggplot(df_filtered, aes(x = Frame, y = Instantaneous.Velocity)) +
geom_line(color = "green") +
labs(title = paste("Velocity for Cell ID", cell_id), y = "Velocity")
plot_thickness <- ggplot(df_filtered, aes(x = Frame, y = Mean.Thickness)) +
geom_line(color = "red") +
labs(title = paste("Mean Thickness for Cell ID", cell_id), y = "Mean Thickness (um)", x = "Frame")
# Arrange the plots in a grid
grid.arrange(plot_drymass, plot_thickness, plot_velocity, ncol = 1)
library(ggplot2)
library(dplyr)
library(gridExtra)
raw_df = read.csv("data/20240619_624Mel_MIZ_DAB_B2_8_Phase-FullFeatureTable.csv")
setwd("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim")
# Actual Data
CD4_cells = read.csv('Data/3mm_tumor/CrossSection1/CD4_XPos.csv')
YFP_cells = read.csv('Data/3mm_tumor/CrossSection1/YFP_XPos.csv')
RFP_cells = read.csv('Data/3mm_tumor/CrossSection1/RFP_XPos.csv')
#constants:
left_x = min(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
right_x = max(CD4_cells$pos_x, YFP_cells$pos_x, RFP_cells$pos_x, na.rm = TRUE)
#k: chemokine decay constant
#d: chemokine diffusion constant
#M: heat of cancer cell
#x: distance from cancer cell to current x position
calculate_diffusion_1d <- function(k, d, m, x) {
ifelse(x < 0,
(m / (2 * sqrt(d * k))) * exp(x * sqrt(k / d)),
(m / (2 * sqrt(d * k))) * exp(-x * sqrt(k / d)))
}
step_size = 1 #minimum step size of agents
calculate_chemokine_gradient <- function(k = 0.2, d = 100, y = 2, r = 1){
chemokine_x_positions = seq(from=left_x, to=right_x, by = step_size)
chemokine_concentration = numeric(length(chemokine_x_positions))
#calculate the chemokine for just the RFP cells
for (row in 1:nrow(RFP_cells)) {
diffusion_value <- calculate_diffusion_1d(k = k, d = d, m = r, x = (chemokine_x_positions - RFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + diffusion_value
}
# calculate the chemokine concentration for the YFP cells (adds it ontop of RFP)
for (row in 1:nrow(YFP_cells)) {
diffusion_value <- calculate_diffusion_1d(k = k, d = d, m = y, x = (chemokine_x_positions - YFP_cells[row, "pos_x"]))
chemokine_concentration =  chemokine_concentration + diffusion_value
}
chemokine_gradient = data.frame(x_pos = chemokine_x_positions, concentration = chemokine_concentration)
return(chemokine_gradient)
}
#function which returns the next movement in which the cell will move
get_next_step <- function(left_conc, right_conc, stoch){
higher_conc_direction = ifelse(right_conc>left_conc,
1,
-1)
#calculates the probablity that a cell will move in the direction with a higher concentration
prob_move_higher_conc = 1 / (1 + exp(-1 * stoch * abs(left_conc - right_conc)))
rand_num = runif(1)
#if randomly generated number is less than probability move in direction of higher concentration else move in opposite direction
if(rand_num < prob_move_higher_conc){
return(step_size * higher_conc_direction)
}else{
return(step_size * (-1 * higher_conc_direction))
}
}
#if the new x position goes past the boundaries, the cell will reappear randomly back in the tumor.
get_new_pos <- function(x_pos, delta_x){
new_pos = x_pos + delta_x
if((new_pos < left_x) | (new_pos > right_x)){
new_pos = sample(left_x:right_x, 1)
}
return(new_pos)
}
#function which will return the x position after moving some delta x such that it will be treated as a torus.
#If the new x position exceeds the right position will be placed on the left most position and vice versa.
get_new_torus_pos <- function(x_pos, delta_x){
new_pos = x_pos + delta_x
if(new_pos < left_x){
new_pos = right_x
}
if(new_pos > right_x){
new_pos = left_x
}
return(new_pos)
}
## Generate test T cell data
#'n': number of t cells
#'gradient': chemokine gradient that the t cells will live in.
generate_agents <- function(n, gradient){
x_positions = sample(left_x:right_x, n, replace = TRUE) #randomly place tcells on tumor
agents <- data.frame(
id = 1:n,
frame = rep(1, n),
x_pos = x_positions
)
agents = merge(agents, gradient[,c("x_pos","concentration")], by = "x_pos", all.x = TRUE)
}
#function which runs the t_cell migration and keeps all x positions and concentrations for every frame.
run_migration_by_frame <- function(n, gradient, iterations, stoch){
agents = generate_agents(n, gradient)
column_names = c("frame", "id", "x_pos","concentration")
for (i in 1:iterations){
previous_frame <- max(agents$frame)
next_frame <- previous_frame + 1
if (next_frame <= iterations){
previous_frame_agents <- agents[agents$frame == previous_frame,]
next_frame_agents <- data.frame(matrix(ncol = length(column_names), nrow = 0))
colnames(next_frame_agents) <- column_names
for (id in 1:n){
previous_frame_agent <- previous_frame_agents[previous_frame_agents$id == id,]
previous_pos_x <- previous_frame_agent$x_pos
# Get concentration to right
previous_pos_x_right <- get_new_torus_pos(previous_pos_x, step_size)
previous_sum_conc_right <- gradient$concentration[gradient$x_pos == previous_pos_x_right]
# Get concentration to left
previous_pos_x_left <- get_new_torus_pos(previous_pos_x, -1*step_size)
previous_sum_conc_left <- gradient$concentration[gradient$x_pos == previous_pos_x_left]
delta_x <- get_next_step(previous_sum_conc_left, previous_sum_conc_right, stoch)
new_pos_x = get_new_pos(previous_pos_x, delta_x)
next_agent <- data.frame(
id = id,
frame = next_frame,
x_pos = new_pos_x,
concentration = gradient$concentration[gradient$x_pos == new_pos_x]
)
next_frame_agents <- rbind(next_frame_agents, next_agent)
}
agents <- rbind(agents, next_frame_agents)
}
}
return(agents)
}
run_migration <- function(n, gradient, iterations, stoch){
# Generate initial agents with their properties and associate with the gradient
agents <- generate_agents(n, gradient)
agents$frame <- 1
# Define the column names for consistency
column_names = c("frame", "id", "x_pos","concentration")
# Iterate through the specified number of iterations
for (i in 2:iterations){
# Get the agents from the previous frame
previous_frame_agents <- agents
# Calculate the next frame number
next_frame <- max(previous_frame_agents$frame) + 1
# Update each agent's position and concentration based on gradient and stochasticity
for (id in 1:n){
# Retrieve the agent's data from the previous frame
previous_frame_agent <- previous_frame_agents[previous_frame_agents$id == id,]
# Get the agent's current position
previous_pos_x <- previous_frame_agent$x_pos
if(id == 1){
print(previous_pos_x)
}
# Get concentration to the right of the current position
previous_pos_x_right <- get_new_torus_pos(previous_pos_x, step_size)
previous_sum_conc_right <- gradient$concentration[gradient$x_pos == previous_pos_x_right]
# Get concentration to the left of the current position
previous_pos_x_left <- get_new_torus_pos(previous_pos_x, -1*step_size)
previous_sum_conc_left <- gradient$concentration[gradient$x_pos == previous_pos_x_left]
# Calculate the change in position based on gradient and stochasticity
delta_x <- get_next_step(previous_sum_conc_left, previous_sum_conc_right, stoch)
# Update the agent's position
new_pos_x <- get_new_pos(previous_pos_x, delta_x)
# Update the agent's data in the current frame
previous_frame_agents[previous_frame_agents$id == id, "x_pos"] <- new_pos_x
previous_frame_agents[previous_frame_agents$id == id, "concentration"] <- gradient$concentration[gradient$x_pos == new_pos_x]
previous_frame_agents[previous_frame_agents$id == id, "frame"] <- next_frame
}
# Replace the agents with updated positions for the next iteration
agents <- previous_frame_agents
}
# Return only the x positions of all agents
return(agents$x_pos)
}
grad = calculate_chemokine_gradient()
run_migration(36, gradient = grad, 50, 1)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/TumorDataModel_Reimp.R", echo=TRUE)
print(
calculate_migration_and_kl(
k = optimized_params$k,
d = optimized_params$d,
m = optimized_params$m,
stoch = optimized_params$stoch,
num_runs = 200
)
)
print(
calculate_migration_and_kl(
k = optimized_params$k,
d = optimized_params$d,
m = optimized_params$m,
stoch = optimized_params$stoch,
input_positions = CD4_cells,
num_runs = 200
)
)
print(
calculate_migration_and_kl(
k = optimized_params$k,
d = optimized_params$d,
m = optimized_params$m,
stoch = optimized_params$stoch,
observed_positions = CD4_cells,
num_runs = 200
)
)
print(
calculate_migration_and_kl(
k = optimized_params$k,
d = optimized_params$d,
m = optimized_params$m,
stoch = optimized_params$stoch,
observed_positions = CD4_cells,
num_runs = 50
)
)
source("C:/Users/Tony Zhang/source/repos/UROP/ChemokineGradientSim/TumorDataModel_Reimp.R", echo=TRUE)
print(
calculate_migration_and_kl(
k = optimized_params$k,
d = optimized_params$d,
m = optimized_params$m,
stoch = optimized_params$stoch,
observed_positions = CD4_cells,
num_runs = 5
)
)
print(
calculate_migration_and_kl(
k = optimized_params$k,
d = optimized_params$d,
m = optimized_params$m,
stoch = optimized_params$stoch,
observed_positions = CD4_cells,
num_runs = 50
)
)
print(
calculate_migration_and_kl(
k = optimized_params$k,
d = optimized_params$d,
m = optimized_params$m,
stoch = optimized_params$stoch,
observed_positions = CD4_cells,
num_runs = 100
)
)
View(optimized_params)
get_kl(  x_positions = sample(left_x:right_x, n, replace = TRUE) , CD4_cells$pos_x)
get_kl(CD4_cells$pos_x,sample(left_x:right_x, n, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
total_kl = 0
for(i in 1:100){
total_kl = total_kl + get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
}
print(total_kl/100)
?L:
KL?
KL?
?KL
?KL
total_kl = 0
for(i in 1:100){
total_kl = total_kl + get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
}
print(total_kl/100)
print(
calculate_migration_and_kl(
k = optimized_params$k,
d = optimized_params$d,
m = optimized_params$m,
stoch = optimized_params$stoch,
observed_positions = CD4_cells,
num_runs = 100
)
)
print(
calculate_migration_and_kl(
k = optimized_params$k,
d = optimized_params$d,
m = optimized_params$m,
stoch = optimized_params$stoch,
observed_positions = CD4_cells,
num_runs = 1000
)
)
total_kl = 0
for(i in 1:1000){
total_kl = total_kl + get_kl(CD4_cells$pos_x,sample(left_x:right_x, 36, replace = TRUE) )
}
print(total_kl/1000)
grad = calculate_chemokine_gradient()
agents = run_migration_by_frame(36, grad, 100, 1)
calculate_kl_for_frames(CD4_cells, agents)
result = calculate_kl_for_frames(CD4_cells, agents)
View(result)
plot(results$frame, results$kl_divergence, type = "l")
plot(result$frame, result$kl_divergence, type = "l")
agents = run_migration_by_frame(36, grad, 100, 1)
result = calculate_kl_for_frames(CD4_cells, agents)
plot(result$frame, result$kl_divergence, type = "l")
mean(bounds$d)
plot(grad$x_pos, grad$concentration, type  = "l")
View(grad)
View(CD4_cells)
# Rename 'pos_x' to 'x_pos' to facilitate merging
CD4_cells <- CD4_cells %>%
rename(x_pos = pos_x)
library(dpylr)
library(dyplr)
library(dbplyr)
# Rename 'pos_x' to 'x_pos' to facilitate merging
CD4_cells <- CD4_cells %>%
rename(x_pos = pos_x)
# Merge df2 with df1 to get the corresponding concentration values for df2 x_pos
df2 <- merge(CD4_cells, grad, by = "x_pos")
library(dplyr)
# Rename 'pos_x' to 'x_pos' to facilitate merging
CD4_cells <- CD4_cells %>%
rename(x_pos = pos_x)
# Merge df2 with df1 to get the corresponding concentration values for df2 x_pos
df2 <- merge(CD4_cells, grad, by = "x_pos")
# Create the line plot with points
ggplot() +
geom_line(data = grad, aes(x = x_pos, y = concentration), color = 'blue', size = 1) +  # Line from df1
geom_point(data = df2, aes(x = x_pos, y = concentration), color = 'green', size = 3) +  # Points from df2 on the line
labs(title = "Concentration vs X Position with Points from Second DataFrame",
x = "X Position",
y = "Concentration") +
theme_minimal()  # Clean minimal theme
# Create the line plot with points
ggplot() +
geom_line(data = grad, aes(x = x_pos, y = concentration), color = 'black', size = 0.5) +  # Line from df1
geom_point(data = df2, aes(x = x_pos, y = concentration), color = 'blue', size = 3) +  # Points from df2 on the line
labs(title = "Concentration vs X Position with Points from Second DataFrame",
x = "X Position",
y = "Concentration") +
theme_minimal()  # Clean minimal theme
# Create the line plot with points
ggplot() +
geom_line(data = grad, aes(x = x_pos, y = concentration), color = 'black', size = 0.5) +  # Line from df1
geom_point(data = df2, aes(x = x_pos, y = concentration), color = 'blue', size = 2) +  # Points from df2 on the line
labs(title = "Concentration vs X Position with Points from Second DataFrame",
x = "X Position",
y = "Concentration") +
theme_minimal()  # Clean minimal theme
