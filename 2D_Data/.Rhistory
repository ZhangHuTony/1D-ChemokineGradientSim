# This is to alert us that NAs are present in the dataset.
max(vector3)
min(vector3)
mean(vector3)
# One way to deal with this is to specify na.rm = TRUE, telling the function to remove the NAs.
max(vector3, na.rm=TRUE)     # remove the missing value when comparing
min(vector3, na.rm=TRUE)
mean(vector3, na.rm=TRUE)
# Another option is to remove the NAs from the dataset.
vector3_no_NAs = na.omit(vector3)
mean(vector3_no_NAs)
# You can check if a value is NA or not
is.na(vector3)  # Checks whether each value in vector3 is NA or not
# You can also use conditioning to remove the NAs in a similar way
# We'll use the is.na() function to check which values are NA
# The ! is a logical Not, so we are checking which values are not NA:
vector3[!is.na(vector3)]
?faithful           # brings up the help page for the dataset 'faithful'
attach(faithful)    # attaches the data set, so you can type "eruptions" and "waiting" for the two variables
summary(faithful)   # brings up 5-point summary of each vector in the dataset
hist(waiting)       # plots a basic histogram of the waiting times between eruptions of Old Faithful
# Adding labels to the axes and a main title
hist(waiting, xlab="Waiting time between eruptions", ylab="# of observations",
main="Histogram of waiting times")
# Setting the axis limits
hist(waiting, xlab="Waiting time between eruptions", ylab="# of observations",
main="Histogram of waiting times", xlim=c(30,110), ylim=c(0,60))
# Choosing the number/size of bins
waiting_breaks = seq(min(waiting), max(waiting), length=10) # Creates 10 points between the min and max values.  This will create 9 bins
hist(waiting, xlab="Waiting time between eruptions", ylab="# of observations",
main="Histogram of waiting time", ylim=c(0,60), breaks=waiting_breaks)
# We can also plot the probabilities of being in each rectangle
hist(waiting, xlab="waiting time between eruptions", main="Histogram of waiting time", prob=TRUE)
lines(density(waiting))  # This gives the continuous version, called a density function.
# There are many other customizations you can use.  You can include the number of observations
# in your title using the paste() function.
# To read more about the paste function, you can look at R's documentation for paste():
?paste()
# This function combines multiple strings (text) to one string
# You can also make the rectangles different colors:
hist(waiting, xlab="waiting time between eruptions", main=paste("Histogram of waiting time with", length(waiting), "observations"), prob=TRUE, col=rainbow(12))
# Draw the density plot with a black dotted line that is 3pt wide
lines(density(waiting), col="black", lty="dotted", lwd=3)  # You can specify, line type, line color, and line width
# You can just specify one color, and it will fill in all the rectangles with that color.
# You can also create a legend
hist(waiting, xlab="waiting time between eruptions",
main=paste("Histogram of waiting time with", length(waiting), "observations"), prob=TRUE, col="slategray2")
# You can just specify one color, and it will fill in all the rectangles with that color.
# You can also create a legend
hist(waiting, xlab="waiting time between eruptions",
main=paste("Histogram of waiting time with", length(waiting), "observations"), prob=TRUE, col="slategray2")
lines(density(waiting), col="black", lty="dashed", lwd=3)
legend("topleft", "density function", lty="dashed", lwd=3, col="black") # Adds a legend to the top left corner of the graph
stem(waiting, scale=1)    # A 'stem-and-leaf' plot, be careful about the decimal place
?stem                     # Not many ways to customize these, but you can change the scale
m_and_m_colors = c("Brown","Green", "Red", "Red", "Brown","Yellow", "Orange", "Brown", "Blue", "Blue")
table(m_and_m_colors)  # R will tabulate the info for you
sales = c(45, 44, 46)
names(sales) = c("Ali", "Maria", "Hinata")
pie(sales) # a pie chart
pie(sales, col=c('red','blue','green'), main='Sales') # Can pick colors and give it a title
par(mfrow=c(2,2))   # Split your window to 4 parts (2 rows, 2 columns)
?par
hist(waiting)
hist(eruptions)
boxplot(waiting)    # A boxplot
boxplot(eruptions)
par(mfrow=c(1,1))   # Change back to the default layout
hist(waiting)
number_of_rivers = length(rivers)  # Change the 0 to be your code
number_of_rivers = length(rivers)  # Change the 0 to be your code
?sort
fifth_shortest_river_length = sort(rivers)[5]
number_rivers_less_than_510 = length(rivers[rivers < 510])
proportion_less_than_mean = length(rivers[rivers < mean(rivers)])/number_of_rivers
proportion_less_than_510 = number_rivers_less_than_510/number_of_rivers
stem_and_leaf_plot = capture.output( stem(rivers, scale = 2) ) # Put your stem() code inside the parentheses
stem_and_leaf_plot
# Check your stem-and-leaf plot for outliers (values far outside the normal range).
# What is the largest river? (This value looks like an outlier)
largest_value = max(rivers)
rivers_histogram = waiting_breaks = seq(0, 4000, length=400) # Creates 10 points between the min and max values.  This will create 9 bins
rivers_histogram
#(3) Make a histogram of the rivers data that has 10 equally sized bins where
# the first bin goes from 0 to 400,
# the second bin goes from 400 to 800, ...
# and the last bin goes from 3600 to 4000
# You can add color and a title if you like. (It's good practice. The auto-grader won't check the color or title.)
waiting_breaks = seq(0, 4000, length=400)
rivers_histogram = hist(waiting, xlab="Waiting time between eruptions", ylab="# of observations",
main="Histogram of waiting time", ylim=c(0,60), breaks=waiting_breaks)
rivers_histogram = hist(waiting, xlab="Waiting time between eruptions", ylab="# of observations",
main="Histogram of waiting time", breaks=waiting_breaks)
#(3) Make a histogram of the rivers data that has 10 equally sized bins where
# the first bin goes from 0 to 400,
# the second bin goes from 400 to 800, ...
# and the last bin goes from 3600 to 4000
# You can add color and a title if you like. (It's good practice. The auto-grader won't check the color or title.)
waiting_breaks = seq(0, 4000, length=10)
#(3) Make a histogram of the rivers data that has 10 equally sized bins where
# the first bin goes from 0 to 400,
# the second bin goes from 400 to 800, ...
# and the last bin goes from 3600 to 4000
# You can add color and a title if you like. (It's good practice. The auto-grader won't check the color or title.)
waiting_breaks = seq(0, 4000, length=11)
rivers_histogram = hist(waiting, xlab="Waiting time between eruptions", ylab="# of observations",
main="Histogram of waiting time", breaks=waiting_breaks)
rivers_histogram = hist(waiting, xlab="Length or River", ylab="# of observations",
main="Histogram of river lengths", breaks=waiting_breaks)
number_of_rivers = length(rivers)  # Change the 0 to be your code
fifth_shortest_river_length = sort(rivers)[5]
number_rivers_less_than_510 = length(rivers[rivers < 510])
proportion_less_than_510 = number_rivers_less_than_510/number_of_rivers
proportion_less_than_mean = length(rivers[rivers < mean(rivers)])/number_of_rivers
stem_and_leaf_plot = capture.output( stem(rivers, scale = 2) ) # Put your stem() code inside the parentheses
# Check your stem-and-leaf plot for outliers (values far outside the normal range).
# What is the largest river? (This value looks like an outlier)
largest_value = max(rivers)
#(3) Make a histogram of the rivers data that has 10 equally sized bins where
# the first bin goes from 0 to 400,
# the second bin goes from 400 to 800, ...
# and the last bin goes from 3600 to 4000
# You can add color and a title if you like. (It's good practice. The auto-grader won't check the color or title.)
waiting_breaks = seq(0, 4000, length=11)
rivers_histogram = hist(waiting, xlab="Length or River", ylab="# of observations",
main="Histogram of river lengths", breaks=waiting_breaks)
#(3) Make a histogram of the rivers data that has 10 equally sized bins where
# the first bin goes from 0 to 400,
# the second bin goes from 400 to 800, ...
# and the last bin goes from 3600 to 4000
# You can add color and a title if you like. (It's good practice. The auto-grader won't check the color or title.)
rivers_histogram = hist(waiting, xlab="Length or River", ylab="# of observations",
main="Histogram of river lengths", breaks=seq(0, 4000, length=11))
number_of_rivers = length(rivers)  # Change the 0 to be your code
fifth_shortest_river_length = sort(rivers)[5]
number_rivers_less_than_510 = length(rivers[rivers < 510])
proportion_less_than_510 = number_rivers_less_than_510/number_of_rivers
proportion_less_than_mean = length(rivers[rivers < mean(rivers)])/number_of_rivers
stem_and_leaf_plot = capture.output( stem(rivers, scale = 2) ) # Put your stem() code inside the parentheses
# Check your stem-and-leaf plot for outliers (values far outside the normal range).
# What is the largest river? (This value looks like an outlier)
largest_value = max(rivers)
#(3) Make a histogram of the rivers data that has 10 equally sized bins where
# the first bin goes from 0 to 400,
# the second bin goes from 400 to 800, ...
# and the last bin goes from 3600 to 4000
# You can add color and a title if you like. (It's good practice. The auto-grader won't check the color or title.)
rivers_histogram = hist(waiting, xlab="Length or River", ylab="# of observations",
main="Histogram of river lengths", breaks=seq(0, 4000, length=11))
#(3) Make a histogram of the rivers data that has 10 equally sized bins where
# the first bin goes from 0 to 400,
# the second bin goes from 400 to 800, ...
# and the last bin goes from 3600 to 4000
# You can add color and a title if you like. (It's good practice. The auto-grader won't check the color or title.)
rivers_histogram = hist(rivers, xlab="Length or River", ylab="# of observations",
main="Histogram of river lengths", breaks=seq(0, 4000, length=11))
setwd("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data")
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
# Define the new line equation (CHANGE THESE VALUES)
m <- -1   # Slope
b <- 7000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black", linetype = "dashed") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Convert line to vector form: direction vector (v_x, v_y)
v_x <- 1
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
b <- 20000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
b <- 10000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Define the new line equation (CHANGE THESE VALUES)
m <- -2   # Slope
b <- 10000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
b <- 12000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Define the new line equation (CHANGE THESE VALUES)
m <- -3   # Slope
b <- 15000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
b <- 17000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Define the new line equation (CHANGE THESE VALUES)
m <- -3.5   # Slope
b <- 17000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
b <- 18000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Define the new line equation (CHANGE THESE VALUES)
m <- -3.75   # Slope
b <- 18000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Define the new line equation (CHANGE THESE VALUES)
m <- -4  # Slope
b <- 20000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Define the new line equation (CHANGE THESE VALUES)
m <- -5  # Slope
b <- 23000    # Intercept
# Plot each dataset separately
ggplot() +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Apply projection to each dataset
CD4_1D <- project_onto_line(CD4_df$pos_x, CD4_df$pos_y, m, b)
library(ggplot2)
# Read the CSV files
CD4_df <- read.csv("10mm_tumor/CD4_Pos.csv")
RFP_df <- read.csv("10mm_tumor/RFP_Pos.csv")
YFP_df <- read.csv("10mm_tumor/YFP_Pos.csv")
# Function to project a point onto a given line y = mx + b
project_onto_line <- function(x, y, m, b) {
# Convert line to vector form: direction vector (v_x, v_y)
v_x <- 1
v_y <- m
# Normalize the vector
norm_factor <- sqrt(v_x^2 + v_y^2)
v_x <- v_x / norm_factor
v_y <- v_y / norm_factor
# Compute projection scalar
t <- ((x * v_x + y * v_y) - (b * v_y)) / (v_x^2 + v_y^2)
return(t)  # Return 1D projection coordinate
}
# Define the new line equation (CHANGE THESE VALUES)
m <- -5  # Slope
b <- 23000    # Intercept
# Apply projection to each dataset
CD4_1D <- project_onto_line(CD4_df$pos_x, CD4_df$pos_y, m, b)
RFP_1D <- project_onto_line(RFP_df$pos_x, RFP_df$pos_y, m, b)
YFP_1D <- project_onto_line(YFP_df$pos_x, YFP_df$pos_y, m, b)
# Convert to dataframes
CD4_proj <- data.frame(proj_1D = CD4_1D, Type = "CD4")
RFP_proj <- data.frame(proj_1D = RFP_1D, Type = "RFP")
YFP_proj <- data.frame(proj_1D = YFP_1D, Type = "YFP")
# Combine projected points into a single dataframe for visualization
proj_df <- rbind(CD4_proj, RFP_proj, YFP_proj)
# Plot the 1D representation
ggplot(proj_df, aes(x = proj_1D, fill = Type)) +
geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
theme_minimal() +
labs(title = "1D Projection of Points onto Custom Line",
x = "Projected Coordinate",
y = "Count") +
scale_fill_manual(values = c("CD4" = "blue", "RFP" = "red", "YFP" = "green"))
# Plot the 1D probability density function
ggplot(proj_df, aes(x = proj_1D, color = Type, fill = Type)) +
geom_density(alpha = 0.4) +
theme_minimal() +
labs(title = "PDF of 1D Projection of Points onto Custom Line",
x = "Projected Coordinate",
y = "Density") +
scale_color_manual(values = c("CD4" = "blue", "RFP" = "red", "YFP" = "green")) +
scale_fill_manual(values = c("CD4" = "blue", "RFP" = "red", "YFP" = "green"))
library(gridExtra)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
# Write 1D projected points to CSV files
write.csv(CD4_1D, "10mm_tumor/CD4_1D_projected.csv", row.names = FALSE)
write.csv(RFP_1D, "10mm_tumor/RFP_1D_projected.csv", row.names = FALSE)
write.csv(YFP_1D, "10mm_tumor/YFP_1D_projected.csv", row.names = FALSE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
write.csv(data.frame(CD4_proj), "5mm_tumor/CD4_1D_projected.csv", row.names = FALSE, col.names = FALSE)
write.csv(data.frame(RFP_proj), "5mm_tumor/RFP_1D_projected.csv", row.names = FALSE, col.names = FALSE)
write.csv(data.frame(YFP_proj), "5mm_tumor/YFP_1D_projected.csv", row.names = FALSE, col.names = FALSE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
source("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data/crusher.R", echo=TRUE)
setwd("C:/Users/Zhang/source/repos/Projects/ChemokineGradientSim/2D_Data")
library(ggplot2)
library(gridExtra)
# Read the CSV files
CD4_df <- read.csv("3mm_tumor/CD4_Pos.csv")
RFP_df <- read.csv("3mm_tumor/RFP_Pos.csv")
YFP_df <- read.csv("3mm_tumor/YFP_Pos.csv")
# Function to project a point onto a given line y = mx + b
project_onto_line <- function(x, y, m, b) {
# Compute projection scalar
t <- (x + m * (y - b)) / (1 + m^2)
return(t)  # Return vector of 1D projection coordinates
}
# Define the new line equation
m <- -2  # Slope
b <- 13500  # Intercept
# Plot each dataset separately
p1 <- ggplot() +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
p1
# Define the new line equation
m <- 0  # Slope
b <- 2400  # Intercept
# Plot each dataset separately
p1 <- ggplot() +
geom_point(data = YFP_df, aes(x = pos_x, y = pos_y), color = "green", alpha = 0.8) +
geom_point(data = RFP_df, aes(x = pos_x, y = pos_y), color = "red", alpha = 0.8) +
geom_point(data = CD4_df, aes(x = pos_x, y = pos_y), color = "blue", alpha = 0.8) +
geom_abline(slope = m, intercept = b, color = "black") +
theme_minimal() +
labs(title = "Scatterplot of CD4, RFP, and YFP Positions",
x = "Position X",
y = "Position Y") +
theme(legend.position = "none")
# Apply projection to each dataset
CD4_proj <- project_onto_line(CD4_df$pos_x, CD4_df$pos_y, m, b)
RFP_proj <- project_onto_line(RFP_df$pos_x, RFP_df$pos_y, m, b)
YFP_proj <- project_onto_line(YFP_df$pos_x, YFP_df$pos_y, m, b)
# Convert to dataframes
CD4_1D <- data.frame(proj_1D = CD4_proj, Type = "CD4")
RFP_1D <- data.frame(proj_1D = RFP_proj, Type = "RFP")
YFP_1D <- data.frame(proj_1D = YFP_proj, Type = "YFP")
# Combine projected points into a single dataframe for visualization
proj_df <- rbind(CD4_1D, RFP_1D, YFP_1D)
# Plot the 1D probability density function
p2 <- ggplot(proj_df, aes(x = proj_1D, fill = Type)) +
geom_histogram(alpha = 0.5, bins = 30, position = "identity") +
theme_minimal() +
labs(title = "Histogram of 1D Projections onto Custom Line",
x = "Projected Coordinate",
y = "Frequency") +
scale_fill_manual(values = c("CD4" = "blue", "RFP" = "red", "YFP" = "green"))
# Arrange plots side by side
grid.arrange(p1, p2, ncol = 2)
# Plot the 1D probability density function
p2 <- ggplot(proj_df, aes(x = proj_1D, fill = Type)) +
geom_density(alpha = 0.5, position = "identity") +
theme_minimal() +
labs(title = "Histogram of 1D Projections onto Custom Line",
x = "Projected Coordinate",
y = "Frequency") +
scale_fill_manual(values = c("CD4" = "blue", "RFP" = "red", "YFP" = "green"))
# Arrange plots side by side
grid.arrange(p1, p2, ncol = 2)
